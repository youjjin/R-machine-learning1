x_test <- test_data[, 3:6]
y_test <- test_data[, 2]
y_train <- factor(y_train, levels = c('over', 'under'))
y_test <- factor(y_test, levels = c('over', 'under'))
y_train
#method만 바뀐 것들
ln_model <- train(x_train, y_train,
method = 'lda',
preProcess = c('center', 'scale'),
metric = 'Accuracy',
trControl = trainControl(method = 'cv', number = 10))
# Support Vector Machine
SVM_model <- train(x_train, y_train,
method = 'svmLinear',
preProcess = c('center', 'scale'),
metric = 'Accuracy',
trControl = trainControl(method = 'cv', number = 10))
# Random Forest
RF_model <- train(x_train, y_train,
method = 'rf',
preProcess = c('center', 'scale'),
metric = 'Accuracy',
trControl = trainControl(method = 'cv', number = 10))
#method만 바뀐 것들
ln_model <- train(x_train, y_train,
method = 'lda',
preProcess = c('center', 'scale'),
metric = 'Accuracy',
trControl = trainControl(method = 'cv', number = 10))
# Support Vector Machine
SVM_model <- train(x_train, y_train,
method = 'svmLinear',
preProcess = c('center', 'scale'),
metric = 'Accuracy',
trControl = trainControl(method = 'cv', number = 10))
# Random Forest
RF_model <- train(x_train, y_train,
method = 'rf',
preProcess = c('center', 'scale'),
metric = 'Accuracy',
trControl = trainControl(method = 'cv', number = 10))
pdf.options(family = 'Korea1deb')
knitr::opts_chunk$set(cache=FALSE)
library(extrafont)
loadfonts()
library(ggplot2)
library(dplyr)
library('knitr')
options(width = 60)
library(caret)
library(e1071)
library(randomForest)
library(kernlab)
set.seed(50)
forestry_data <- read.csv('./forestry_sample.csv', header = T, sep = ',')
names(forestry_data) <- c("spp_code", "stories", "below_crown_height", "height", "estimated_height", "DBH")
forestry_data_set <- forestry_data %>% filter(!is.na( below_crown_height + height + estimated_height + DBH))
data_index <- createDataPartition(forestry_data_set$stories, p=0.8, list = F)
train_data <- forestry_data_set[data_index, ]
test_data <- forestry_data_set[-data_index, ]
x_train <- train_data[, 3:6]
y_train <- train_data[, 2]
x_test <- test_data[, 3:6]
y_test <- test_data[, 2]
y_train <- factor(y_train, levels = c('over', 'under'))
y_test <- factor(y_test, levels = c('over', 'under'))
ln_model <- train(x_train, y_train,
method = 'lda',
preProcess = c('center', 'scale'),
metric = 'Accuracy',
trControl = trainControl(method = 'cv', number = 10))
y_pred_ln <- predict(ln_model, x_test)
cf_ln <- confusionMatrix(y_pred_ln, y_test, mode = "everything")
r_pred_ln
y_pred_ln
cf_ln
# Support Vector Machine
SVM_model <- train(x_train, y_train,
method = 'svmLinear',
preProcess = c('center', 'scale'),
metric = 'Accuracy',
trControl = trainControl(method = 'cv', number = 10))
y_pred_SVM <- predict(SVM_model, x_test)
cf_SVM <- confusionMatrix(y_pred_SVM, y_test, mode = "everything")
cf_SVM
cf_ln
# Random Forest
RF_model <- train(x_train, y_train,
method = 'rf',
preProcess = c('center', 'scale'),
metric = 'Accuracy',
trControl = trainControl(method = 'cv', number = 10))
y_pred_RF <- predict(RF_model, x_test)
cf_RF <- confusionMatrix(y_pred_RF, y_test, mode = "everything")
cf_RF
forestry_test <-read.csv('./prediction_set.csv', header = T, sep = ',')
names(forestry_test) <- c("below_crown_height", "height", "estimated_height", "DBH")
forestry_test_set <- forestry_test %>% filter(!is.na(below_crown_height + height + estimated_height + DBH))
test_x <- forestry_test_set[,1:4]
test_x
test_y <- predict(RF_model, test_x)
test_y
result <- cbind(stories=test_y, forestry_test_set)
length(which(test_y == "under"))
num_over <- (which(test_y == "over"))
num_matrix <- cbind(num_under, num_over)
num_under <- (which(test_y == "under"))
num_over <- (which(test_y == "over"))
num_under
num_under
num_over
num_under <- which(test_y == "under")
num_under
which(test_y == "over")
which(test_y == "under")
num_under <- length(which(test_y == "under"))
num_under <- length(which(test_y == "under"))
num_over <- length(which(test_y == "over"))
cbind(num_under, num_over)
matrix_num <- cbind(num_under, num_over)
matrix_num <- cbind(num_under, num_over)
f_melt <- melt(matrix_num)
library(ggplot2)
f_melt <- melt(matrix_num)
pdf.options(family = 'Korea1deb')
knitr::opts_chunk$set(cache=FALSE)
library(extrafont)
loadfonts()
library(ggplot2)
library(dplyr)
library('knitr')
options(width = 60)
library(caret)
library(e1071)
library(randomForest)
library(kernlab)
library(readxl)
library(reshape2)
set.seed(50)
f_melt <- melt(matrix_num)
f_melt <- melt(matrix_num, id = c("over", "under"))
View(f_melt)
f_melt <- melt(matrix_num, id = c("over", "under"))
ggplot(f_melt, aes(over, under))+geom_bar(stat="identity")
f_melt <- melt(matrix_num)
f_melt <- melt(matrix_num, id = c("over", "under"))
ggplot(f_melt, aes(over, under))+geom_bar(stat="identity")
ggplot(f_melt, aes(Var2, value))+geom_bar(stat="identity")
num_under
num_over
ggplot(f_melt, aes(Var2, value))+geom_bar(stat="identity")
ggplot(f_melt, aes(Var2, value))+geom_bar(stat="identity", color = "yellow")
ggplot(f_melt, aes(Var2, value), color = "yellow")+geom_bar(stat="identity", color = "yellow")
ggplot(f_melt, aes(Var2, value))+geom_bar(stat="identity", fill = '#999966')
pr_ln <- data.frame(cf_ln$byClass[5:7])
pr_ln <- t(pr_ln)
pr_svm <- data.frame(cf_SVM$byClass[5:7])
pr_svm <- t(pr_svm)
pr_rf <- data.frame(cf_RF$byClass[5:7])
pr_rf <- t(pr_rf)
PreRec <- rbind(pr_ln, pr_svm, pr_rf)
rownames(PreRec) <- c('Linear model', 'SVM model', 'RF model')
print(PreRec)
forestry_test <-read.csv('./prediction_set.csv', header = T, sep = ',')
names(forestry_test) <- c("below_crown_height", "height", "estimated_height", "DBH")
forestry_test_set <- forestry_test %>% filter(!is.na(below_crown_height + height + estimated_height + DBH))
test_x <- forestry_test_set[,1:4]
test_x
test_y <- predict(ln_model, test_x)
test_y
under <- length(which(test_y == "under"))
under
over <- length(which(test_y == "over"))
over
matrix_num <- cbind(under, over)
result <- cbind(stories=test_y, forestry_test_set)
forestry_test <-read.csv('./prediction_set.csv', header = T, sep = ',')
names(forestry_test) <- c("below_crown_height", "height", "estimated_height", "DBH")
forestry_test_set <- forestry_test %>% filter(!is.na(below_crown_height + height + estimated_height + DBH))
test_x <- forestry_test_set[,1:4]
test_y <- predict(ln_model, test_x)
under <- length(which(test_y == "under"))
under
over <- length(which(test_y == "over"))
over
matrix_num <- cbind(under, over)
result <- cbind(stories=test_y, forestry_test_set)
matrix_num
forestry_test <-read.csv('./prediction_set.csv', header = T, sep = ',')
names(forestry_test) <- c("below_crown_height", "height", "estimated_height", "DBH")
forestry_test_set <- forestry_test %>% filter(!is.na(below_crown_height + height + estimated_height + DBH))
test_x <- forestry_test_set[,1:4]
test_y <- predict(SVM_model, test_x)
under <- length(which(test_y == "under"))
under
over <- length(which(test_y == "over"))
over
matrix_num <- cbind(under, over)
matrix_num
result <- cbind(stories=test_y, forestry_test_set)
cf_ln
cf_SVM
pdf.options(family = 'Korea1deb')
knitr::opts_chunk$set(cache=FALSE)
library(extrafont)
loadfonts()
library(ggplot2)
library(dplyr)
library('knitr')
options(width = 60)
library(caret)
library(e1071)
library(randomForest)
library(kernlab)
library(readxl)
library(reshape2)
set.seed(43)
forestry_data <- read.csv('./forestry_sample.csv', header = T, sep = ',')
names(forestry_data) <- c("spp_code", "stories", "below_crown_height", "height", "estimated_height", "DBH")
forestry_data_set <- forestry_data %>% filter(!is.na( below_crown_height + height + estimated_height + DBH))
data_index <- createDataPartition(forestry_data_set$stories, p=0.8, list = F)
train_data <- forestry_data_set[data_index, ]
test_data <- forestry_data_set[-data_index, ]
x_train <- train_data[, 3:6]
y_train <- train_data[, 2]
x_test <- test_data[, 3:6]
y_test <- test_data[, 2]
y_train <- factor(y_train, levels = c('over', 'under'))
y_test <- factor(y_test, levels = c('over', 'under'))
ln_model <- train(x_train, y_train,
method = 'lda',
preProcess = c('center', 'scale'),
metric = 'Accuracy',
trControl = trainControl(method = 'cv', number = 10))
y_pred_ln <- predict(ln_model, x_test)
cf_ln <- confusionMatrix(y_pred_ln, y_test, mode = "everything")
cf_ln
# Support Vector Machine
SVM_model <- train(x_train, y_train,
method = 'svmLinear',
preProcess = c('center', 'scale'),
metric = 'Accuracy',
trControl = trainControl(method = 'cv', number = 10))
y_pred_SVM <- predict(SVM_model, x_test)
cf_SVM <- confusionMatrix(y_pred_SVM, y_test, mode = "everything")
cf_SVM
# Random Forest
RF_model <- train(x_train, y_train,
method = 'rf',
preProcess = c('center', 'scale'),
metric = 'Accuracy',
trControl = trainControl(method = 'cv', number = 10))
y_pred_RF <- predict(RF_model, x_test)
cf_RF <- confusionMatrix(y_pred_RF, y_test, mode = "everything")
cf_RF
cf_SVM
write.csv(result, "./result_set.csv")
write.csv(result, "./result_svm.csv")
test_y <- predict(ln_model, test_x)
result <- cbind(stories=test_y, forestry_test_set)
write.csv(result, "./result_ln.csv")
test_y <- predict(RF_model, test_x)
result <- cbind(stories=test_y, forestry_test_set)
write.csv(result, "./result_RF.csv")
test_y <- predict(SVM_model, test_x)
result <- cbind(stories=test_y, forestry_test_set)
write.csv(result, "./result_SVM.csv")
ln_y <- predict(ln_model, test_x)
svm_y <- predict(SVM_model, test_x)
rf_y <- predict(RF_model, test_x)
rf_y <- predict(RF_model, test_x)
ln_under <- length(which(ln_y == "under"))
ln_under <- length(which(ln_y == "under"))
ln_over <- length(which(ln_y == "over"))
ln_over <- length(which(ln_y == "over"))
ln_result_matrix <- cbind(ln_over, ln_under)
ln_over <- length(which(ln_y == "over"))
result_matrix <- cbind(ln_over, ln_under)
result_matrix
svm_under <- length(which(svm_y == "under"))
svm_over <- length(which(svm_y == "over"))
result_matrix <- rbind(svm_over, svm_under)
result_matrix
ln_over <- length(which(ln_y == "over"))
result_matrix <- cbind(ln_over, ln_under)
result_matrix
result_matrix <- rbind(svm_num, result_matrix)
svm_under <- length(which(svm_y == "under"))
svm_over <- length(which(svm_y == "over"))
svm_num <- cbind(svm_over, svm_under)
result_matrix <- rbind(svm_num, result_matrix)
result_matrix
rf_under <- length(which(rf_y == "under"))
rf_over <- length(which(rf_y == "over"))
rf_num <- cbind(rf_over, rf_under)
result_matrix <- rbind(rf_num, result_matrix)
result_matrix
ln_under <- length(which(ln_y == "under"))
ln_over <- length(which(ln_y == "over"))
result_matrix <- rbind(ln_over, ln_under)
result_matrix
svm_under <- length(which(svm_y == "under"))
svm_over <- length(which(svm_y == "over"))
svm_num <- rbind(svm_over, svm_under)
result_matrix <- cbind(svm_num, result_matrix)
result_matrix
rf_under <- length(which(rf_y == "under"))
rf_over <- length(which(rf_y == "over"))
rf_over <- length(which(rf_y == "over"))
rf_num <- rbind(rf_over, rf_under)
result_matrix <- cbind(rf_num, result_matrix)
result_matrix
under <- length(which(rf_y == "under"))
over <- length(which(rf_y == "over"))
rf_num <- rbind(over, under)
result_matrix <- cbind(rf_num, result_matrix)
result_matrix
forestry_test <-read.csv('./prediction_set.csv', header = T, sep = ',')
names(forestry_test) <- c("below_crown_height", "height", "estimated_height", "DBH")
forestry_test_set <- forestry_test %>% filter(!is.na(below_crown_height + height + estimated_height + DBH))
test_x <- forestry_test_set[,1:4]
ln_y <- predict(ln_model, test_x)
svm_y <- predict(SVM_model, test_x)
rf_y <- predict(RF_model, test_x)
ln_under <- length(which(ln_y == "under"))
ln_over <- length(which(ln_y == "over"))
result_matrix <- rbind(ln_over, ln_under)
result_matrix
svm_under <- length(which(svm_y == "under"))
svm_over <- length(which(svm_y == "over"))
svm_num <- rbind(svm_over, svm_under)
result_matrix <- cbind(svm_num, result_matrix)
result_matrix
under <- length(which(rf_y == "under"))
over <- length(which(rf_y == "over"))
rf_num <- rbind(over, under)
result_matrix <- cbind(rf_num, result_matrix)
result_matrix
result_ln <- cbind(stories=ln_y, forestry_test_set)
result_svm <- cbind(stories=svm_y, forestry_test_set)
result_rf <- rbind(stories=rf_y, forestry_test_set)
write.csv(result_ln, "./result_ln.csv")
write.csv(result_svm, "./result_SVM.csv")
write.csv(result_rf, "./result_RF.csv")
names(result_matrix) <- c("RF-model","SVM-model", "ln-modle")
result_matrix
colnames(result_matrix) <- c("RF-model","SVM-model", "ln-modle")
colnames
cf_ln
cf_SVM
forestry_test <-read.csv('./prediction_set.csv', header = T, sep = ',')
names(forestry_test) <- c("below_crown_height", "height", "estimated_height", "DBH")
forestry_test_set <- forestry_test %>% filter(!is.na(below_crown_height + height + estimated_height + DBH))
test_x <- forestry_test_set[,1:4]
ln_y <- predict(ln_model, test_x)
svm_y <- predict(SVM_model, test_x)
rf_y <- predict(RF_model, test_x)
ln_under <- length(which(ln_y == "under"))
ln_over <- length(which(ln_y == "over"))
result_matrix <- rbind(ln_over, ln_under)
result_matrix
svm_under <- length(which(svm_y == "under"))
svm_over <- length(which(svm_y == "over"))
svm_num <- rbind(svm_over, svm_under)
result_matrix <- cbind(svm_num, result_matrix)
result_matrix
under <- length(which(rf_y == "under"))
over <- length(which(rf_y == "over"))
rf_num <- rbind(over, under)
result_matrix <- cbind(rf_num, result_matrix)
result_matrix
result_ln <- cbind(stories=ln_y, forestry_test_set)
result_svm <- cbind(stories=svm_y, forestry_test_set)
result_rf <- rbind(stories=rf_y, forestry_test_set)
write.csv(result_ln, "./result_ln.csv")
write.csv(result_svm, "./result_SVM.csv")
write.csv(result_rf, "./result_RF.csv")
forestry_test <-read.csv('./prediction_set.csv', header = T, sep = ',')
names(forestry_test) <- c("below_crown_height", "height", "estimated_height", "DBH")
forestry_test_set <- forestry_test %>% filter(!is.na(below_crown_height + height + estimated_height + DBH))
test_x <- forestry_test_set[,1:4]
ln_y <- predict(ln_model, test_x)
svm_y <- predict(SVM_model, test_x)
rf_y <- predict(RF_model, test_x)
ln_under <- length(which(ln_y == "under"))
ln_over <- length(which(ln_y == "over"))
result_matrix <- rbind(ln_over, ln_under)
svm_under <- length(which(svm_y == "under"))
svm_over <- length(which(svm_y == "over"))
svm_num <- rbind(svm_over, svm_under)
result_matrix <- cbind(svm_num, result_matrix)
under <- length(which(rf_y == "under"))
over <- length(which(rf_y == "over"))
rf_num <- rbind(over, under)
result_matrix <- cbind(rf_num, result_matrix)
result_matrix[,1] <- "rf_model"
result_matrix[,2] <- "svm_model"
result_matrix[,3] <- "ln_model"
result_matrix
result_ln <- cbind(stories=ln_y, forestry_test_set)
result_svm <- cbind(stories=svm_y, forestry_test_set)
result_rf <- rbind(stories=rf_y, forestry_test_set)
write.csv(result_ln, "./result_ln.csv")
write.csv(result_svm, "./result_SVM.csv")
write.csv(result_rf, "./result_RF.csv")
forestry_test <-read.csv('./prediction_set.csv', header = T, sep = ',')
names(forestry_test) <- c("below_crown_height", "height", "estimated_height", "DBH")
forestry_test_set <- forestry_test %>% filter(!is.na(below_crown_height + height + estimated_height + DBH))
test_x <- forestry_test_set[,1:4]
ln_y <- predict(ln_model, test_x)
svm_y <- predict(SVM_model, test_x)
rf_y <- predict(RF_model, test_x)
ln_under <- length(which(ln_y == "under"))
ln_over <- length(which(ln_y == "over"))
result_matrix <- cbind(ln_over, ln_under)
result_matrix
svm_under <- length(which(svm_y == "under"))
svm_over <- length(which(svm_y == "over"))
result_matrix <- cbind(svm_over, svm_under)
result_matrix
rf_under <- length(which(rf_y == "under"))
rf_over <- length(which(rf_y == "over"))
result_matrix <- cbind(rf_over, rf_under)
result_matrix
result_ln <- cbind(stories=ln_y, forestry_test_set)
result_svm <- cbind(stories=svm_y, forestry_test_set)
result_rf <- rbind(stories=rf_y, forestry_test_set)
write.csv(result_ln, "./result_ln.csv")
write.csv(result_svm, "./result_SVM.csv")
write.csv(result_rf, "./result_RF.csv")
ln_under <- length(which(ln_y == "under"))
ln_over <- length(which(ln_y == "over"))
result_matrix <- cbind(ln_over, ln_under)
result_matrix
ln_under <- length(which(ln_y == "under"))
ln_over <- length(which(ln_y == "over"))
result_matrix <- cbind(ln_over, ln_under)
result_matrix
svm_under <- length(which(svm_y == "under"))
svm_over <- length(which(svm_y == "over"))
result_matrix <- cbind(svm_over, svm_under)
result_matrix
rf_under <- length(which(rf_y == "under"))
rf_over <- length(which(rf_y == "over"))
result_matrix <- cbind(rf_over, rf_under)
result_matrix
pdf.options(family = 'Korea1deb')
knitr::opts_chunk$set(cache=FALSE)
library(extrafont)
loadfonts()
library(ggplot2)
library(dplyr)
library('knitr')
options(width = 60)
library(caret)
library(e1071)
library(randomForest)
library(kernlab)
library(readxl)
library(reshape2)
set.seed(43)
forestry_data <- read.csv('./forestry_sample.csv', header = T, sep = ',')
names(forestry_data) <- c("spp_code", "stories", "below_crown_height", "height", "estimated_height", "DBH")
forestry_data_set <- forestry_data %>% filter(!is.na( below_crown_height + height + estimated_height + DBH))
data_index <- createDataPartition(forestry_data_set$stories, p=0.8, list = F)
train_data <- forestry_data_set[data_index, ]
test_data <- forestry_data_set[-data_index, ]
x_train <- train_data[, 3:6]
y_train <- train_data[, 2]
x_test <- test_data[, 3:6]
y_test <- test_data[, 2]
y_train <- factor(y_train, levels = c('over', 'under'))
y_test <- factor(y_test, levels = c('over', 'under'))
ln_model <- train(x_train, y_train,
method = 'lda',
preProcess = c('center', 'scale'),
metric = 'Accuracy',
trControl = trainControl(method = 'cv', number = 10))
y_pred_ln <- predict(ln_model, x_test)
cf_ln <- confusionMatrix(y_pred_ln, y_test, mode = "everything")
cf_ln
# Support Vector Machine
SVM_model <- train(x_train, y_train,
method = 'svmLinear',
preProcess = c('center', 'scale'),
metric = 'Accuracy',
trControl = trainControl(method = 'cv', number = 10))
y_pred_SVM <- predict(SVM_model, x_test)
cf_SVM <- confusionMatrix(y_pred_SVM, y_test, mode = "everything")
cf_SVM
# Random Forest
RF_model <- train(x_train, y_train,
method = 'rf',
preProcess = c('center', 'scale'),
metric = 'Accuracy',
trControl = trainControl(method = 'cv', number = 10))
y_pred_RF <- predict(RF_model, x_test)
cf_RF <- confusionMatrix(y_pred_RF, y_test, mode = "everything")
cf_RF
cf_RF
pr_ln <- data.frame(cf_ln$byClass[5:7])
pr_ln <- t(pr_ln)
pr_svm <- data.frame(cf_SVM$byClass[5:7])
pr_svm <- t(pr_svm)
pr_rf <- data.frame(cf_RF$byClass[5:7])
pr_rf <- t(pr_rf)
PreRec <- rbind(pr_ln, pr_svm, pr_rf)
rownames(PreRec) <- c('Linear model', 'SVM model', 'RF model')
print(PreRec)
#개발자 입장에서 가벼워서 많이 쓰는 모델 : Linear model
#환자인데 환자가 아닌것 같다고 나올 수 있는 모델 : SVM model
#환자가 아닌데 환자라고 나와서 필요없는 지출을 하게되는 모델 : RF model
